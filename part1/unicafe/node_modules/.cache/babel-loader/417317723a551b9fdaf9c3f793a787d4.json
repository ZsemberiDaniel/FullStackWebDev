{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\FullStackWebDev\\\\FullStackWebDev\\\\part1\\\\unicafe\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserInput = ({\n  onGoodClicked,\n  onNeutralClicked,\n  onBadClicked\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback :)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onGoodClicked,\n      children: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onNeutralClicked,\n      children: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onBadClicked,\n      children: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = UserInput;\n\nconst Statistics = ({\n  goodCount,\n  neutralCount,\n  badCount\n}) => {\n  const all = goodCount + neutralCount + badCount;\n\n  if (all == 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"good \", goodCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"neutral \", neutralCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"bad \", badCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"all \", all]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"average \", all == 0 ? 0 : (goodCount - badCount) / all]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"positive \", all == 0 ? 0 : goodCount / all * 100, \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_c2 = Statistics;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(UserInput, {\n      onGoodClicked: () => setGood(good + 1),\n      onNeutralClicked: () => setNeutral(neutral + 1),\n      onBadClicked: () => setBad(bad + 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      goodCount: good,\n      neutralCount: neutral,\n      badCount: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UserInput\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["C:/Coding/FullStackWebDev/FullStackWebDev/part1/unicafe/src/App.js"],"names":["React","useState","UserInput","onGoodClicked","onNeutralClicked","onBadClicked","Statistics","goodCount","neutralCount","badCount","all","App","good","setGood","neutral","setNeutral","bad","setBad"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,gBAAjB;AAAmCC,EAAAA;AAAnC,CAAD,KAAuD;AACrE,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEF,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAEC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAEC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;KAAMH,S;;AAWN,MAAMI,UAAU,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,YAAb;AAA2BC,EAAAA;AAA3B,CAAD,KAA2C;AAC1D,QAAMC,GAAG,GAAGH,SAAS,GAAGC,YAAZ,GAA2BC,QAAvC;;AACA,MAAIC,GAAG,IAAI,CAAX,EACA;AACI,wBACI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAPD,MASA;AACI,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,4BAASH,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,+BAAYC,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,2BAAQC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,2BAAQC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,+BAAYA,GAAG,IAAI,CAAP,GAAW,CAAX,GAAe,CAACH,SAAS,GAAGE,QAAb,IAAyBC,GAApD;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA,gCAAaA,GAAG,IAAI,CAAP,GAAW,CAAX,GAAeH,SAAS,GAAGG,GAAZ,GAAkB,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;AACJ,CAxBD;;MAAMJ,U;;AA0BN,MAAMK,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACe,GAAD,EAAMC,MAAN,IAAgBhB,QAAQ,CAAC,CAAD,CAA9B;AAEA,sBACE;AAAA,4BACI,QAAC,SAAD;AAAW,MAAA,aAAa,EAAE,MAAMY,OAAO,CAACD,IAAI,GAAG,CAAR,CAAvC;AACY,MAAA,gBAAgB,EAAE,MAAMG,UAAU,CAACD,OAAO,GAAG,CAAX,CAD9C;AAEY,MAAA,YAAY,EAAE,MAAMG,MAAM,CAACD,GAAG,GAAG,CAAP;AAFtC;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,UAAD;AAAY,MAAA,SAAS,EAAEJ,IAAvB;AACY,MAAA,YAAY,EAAEE,OAD1B;AAEY,MAAA,QAAQ,EAAEE;AAFtB;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAhBD;;GAAML,G;;MAAAA,G;AAkBN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\n\nconst UserInput = ({ onGoodClicked, onNeutralClicked, onBadClicked }) => {\n    return (\n        <div>\n            <h1>give feedback :)</h1>\n            <button onClick={onGoodClicked}>good</button>\n            <button onClick={onNeutralClicked}>neutral</button>\n            <button onClick={onBadClicked}>bad</button>\n        </div>\n    )\n}\n\nconst Statistics = ({ goodCount, neutralCount, badCount }) => {\n    const all = goodCount + neutralCount + badCount;\n    if (all == 0)\n    {\n        return (\n            <div>\n                <p>No feedback given</p>\n            </div>\n        )\n    }\n    else\n    {\n        return (\n            <div>\n                <h1>statistics</h1>\n                <p>good {goodCount}</p>\n                <p>neutral {neutralCount}</p>\n                <p>bad {badCount}</p>\n                <p>all {all}</p>\n                <p>average {all == 0 ? 0 : (goodCount - badCount) / all}</p>\n                <p>positive {all == 0 ? 0 : goodCount / all * 100} %</p>\n            </div>\n        )\n    }\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  return (\n    <div>\n        <UserInput onGoodClicked={() => setGood(good + 1)}\n                    onNeutralClicked={() => setNeutral(neutral + 1)}\n                    onBadClicked={() => setBad(bad + 1)} />\n        <Statistics goodCount={good}\n                    neutralCount={neutral}\n                    badCount={bad} />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}